# ROTEIRO DE TESTE (formato .env)
# Este arquivo contém um roteiro de testes resumido em comentários e
# variáveis de ambiente úteis para executar os testes no Postman.
# Salve este arquivo em: provaDSW/ROTEIRO_TESTE.env
# Para usar no Postman: crie um Environment e copie as variáveis abaixo.

# ====== Configuração base ======
BASE_URL=http://localhost:3000

# ====== Usuários de teste ======
VENDEDOR_NOME=Vendedor
VENDEDOR_EMAIL=vendedor@example.com
VENDEDOR_SENHA=vendedor001

COMPRADOR_NOME=Comprador
COMPRADOR_EMAIL=comprador@example.com
COMPRADOR_SENHA=comprador001

# Tokens (populados após login via Postman)
TOKEN_VENDEDOR=
TOKEN_COMPRADOR=

# ====== Produto de teste ======
PRODUTO_NOME="Camisa Azul"
PRODUTO_PRECO=49.90
PRODUTO_DESCRICAO="Camisa usada, em bom estado"
PRODUTO_IMAGEM_URL=
PRODUTO_ID=

# ====== Proposta de teste ======
PROPOSTA_VALOR=40.00
PROPOSTA_ID=

# ====== Upload ======
IMAGE_FIELD_NAME=imagem
IMAGE_MAX_SIZE=5MB
IMAGE_ACCEPTED_TYPES=jpeg,jpg,png,gif

# ====== Roteiro resumido (execute na ordem) ======
# 1) Preparação: executar src/sql/ddl.sql no MySQL para criar o schema (provaDB).
# 2) Start server: cd provaDSW && npm install && npm start (ou usar wrapper no diretório pai).
# 3) Criar usuários:
#    POST {{BASE_URL}}/usuario
#    Body JSON: { "nome": "${VENDEDOR_NOME}", "email": "${VENDEDOR_EMAIL}", "senha": "${VENDEDOR_SENHA}" }
#    repetir para COMPRADOR
# 4) Login:
#    POST {{BASE_URL}}/usuario/login -> obter token e salvar em TOKEN_VENDEDOR / TOKEN_COMPRADOR
# 5) Upload de imagem (vendedor):
#    POST {{BASE_URL}}/upload-imagem (form-data)
#    Header: Authorization: Bearer {{TOKEN_VENDEDOR}}
#    Campo file: key = ${IMAGE_FIELD_NAME} (type=file)
#    Response: { "imagem_url": "/storage/<filename>" } -> salvar em PRODUTO_IMAGEM_URL
# 6) Inserir produto (vendedor):
#    POST {{BASE_URL}}/inserir-produto
#    Header: Authorization: Bearer {{TOKEN_VENDEDOR}}
#    Body JSON: { "nome": ${PRODUTO_NOME}, "preco": ${PRODUTO_PRECO}, "descricao": ${PRODUTO_DESCRICAO}, "imagem_url": ${PRODUTO_IMAGEM_URL} }
#    Salvar produto id em PRODUTO_ID
# 7) Listagens e filtros:
#    - GET /listar-produtos
#    - GET /listar-produtos?nome=Camisa
#    - GET /listar-produtos?minPreco=40&maxPreco=100
#    - GET /meus-produtos (autenticado como vendedor) -> deve retornar seu produto
# 8) Buscar produto por id: GET /buscar-produto/${PRODUTO_ID}
# 9) Propostas (comprador):
#    POST /inserir-proposta (Authorization Bearer TOKEN_COMPRADOR)
#    Body JSON: { "produto_id": ${PRODUTO_ID}, "valor_ofertado": ${PROPOSTA_VALOR} }
#    Salvar PROPOSTA_ID
# 10) Listar propostas:
#    - GET /minhas-propostas (comprador)
#    - GET /propostas-produto/${PRODUTO_ID} (vendedor)
# 11) Responder proposta (vendedor):
#    PUT /responder-proposta/${PROPOSTA_ID} Body: { "status": "aceita" } -> produto deve ficar inativo
# 12) Alterar / deletar produto (apenas dono):
#    - PUT /alterar-produto/${PRODUTO_ID}
#    - DELETE /deletar-produto/${PRODUTO_ID}
# 13) Edge cases:
#    - Tentar login inválido -> 401
#    - Inserir produto sem nome/preco -> 400
#    - Proposta no próprio produto -> 400
#    - Upload tipo inválido (>5MB ou .exe) -> 400
# 14) Cleanup (opcional): remover registros criados via SQL
#    DELETE FROM proposta WHERE produto_id = ${PRODUTO_ID};
#    DELETE FROM produto WHERE produto_id = ${PRODUTO_ID};
#    DELETE FROM usuario WHERE email IN ('${VENDEDOR_EMAIL}','${COMPRADOR_EMAIL}');

# ====== Observações ======
# - Tokens expiram em 1h.
# - Se o usuário já existir, o endpoint /usuario retornará 409 (Email já cadastrado).
# - Se preferir, importe este arquivo como Environment no Postman (copiar variáveis manualmente).
